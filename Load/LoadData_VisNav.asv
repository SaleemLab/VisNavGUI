function LoadData_VisNav(EXP, P, S)
% Load data from multiple experiments and synch them.
% Usage : LoadData_VisNav(EXP, P, S)
% Input arguments:
%  - EXP: TStructure object which will eventually contain the data in
%    different fields.
%       EXP.Nav: VR behavior
%       EXP.Spk: spiking data
%       EXP.Vis: BonVision stimulus parameters
%       EXP.Eye: eye tracking data
%  - P: parameter structure. See CreateParamsStructure.
%  - S: filepaths as returned by the FAFF function.
%       Each field of S is n x 2 cell array of path.
%       Rows correspond to different experiments. First 
%       column contains path to data files; second column contains path to
%       synchronization file.

%************Saving some metadata in P and EXP for convenience************%
P.LoadParams.animal = S.animalname;
P.LoadParams.series = S.series;
P.LoadParams.exp = S.explist;
EXP.animal = S.animalname;
EXP.series = S.series;
EXP.exp = S.explist;

%***********Synching and loading data from selected experiments***********%
for iexp = 1:numel(S.explist)
    
    %Loading Synchronization signals from the different data types********%
    if ~isempty(S.Nav_path{iexp,2})
        [Nav_SynchSignal, Nav_SynchUpSampling] = GetSynchSignal(S.Nav_path{iexp,2}, P.LoadParams.SynchType);
        if strcmp(P.LoadParams.SynchSignalRef,'VR')
            SynchSignalRef = Nav_SynchSignal;
            Ref_SynchUpSampling = Nav_SynchUpSampling;
        end
    end
    if ~isempty(S.Spk_path{iexp,2})
        [Spk_SynchSignal, Spk_SynchUpSampling] = GetSynchSignal(S.Spk_path{iexp,2}, P.LoadParams.SynchType);
        if strcmp(P.LoadParams.SynchSignalRef,'ephys')
            SynchSignalRef = Spk_SynchSignal;
            Ref_SynchUpSampling = Spk_SynchUpSampling;
        end
    end
    if ~isempty(S.Lfp_path{iexp,2})
        [Lfp_SynchSignal, Lfp_SynchUpSampling] = GetSynchSignal(S.Lfp_path{iexp,2}, P.LoadParams.SynchType);
        if strcmp(P.LoadParams.SynchSignalRef,'ephys')
            SynchSignalRef = Spk_SynchSignal;
            Ref_SynchUpSampling = Lfp_SynchUpSampling;
        end
    end
    if ~isempty(S.Vis_path{iexp,2})
        [Vis_SynchSignal, Vis_SynchUpSampling] = GetSynchSignal(S.Vis_path{iexp,2}, P.LoadParams.SynchType);
        if strcmp(P.LoadParams.SynchSignalRef,'BonV')
            SynchSignalRef = Vis_SynchSignal;
            Ref_SynchUpSampling = Vis_SynchUpSampling;
        end
    end
    if ~isempty(S.Eye_path{iexp,2})
        [Eye_SynchSignal, Eye_SynchUpSampling] = GetSynchSignal(S.Eye_path{iexp,2}, P.LoadParams.SynchType);
        if strcmp(P.LoadParams.SynchSignalRef,'eye')
            SynchSignalRef = Eye_SynchSignal;
            Ref_SynchUpSampling = Eye_SynchUpSampling;
        end
    end
    
    
    %Loading, synching and concatenating the data*************************%
    %For each type of signal:
    %Synching signals from different data types to SynchSignalRef
    %Loading resampling and synching the data
    %Concatenating the data from successive experiments
    if ~isempty(S.Nav_path{iexp,1})
        [Nav_ZeroIdx, Nav_relativeRate] = SynchSignals(SynchSignalRef, Nav_SynchSignal, Ref_SynchUpSampling, Nav_SynchUpSampling);
        Nav = LoadNavData(S.Nav_path{iexp,1}, P.LoadParams.LoadSmthTime, sampleTimes, Nav_ZeroIdx, Nav_relativeRate);
        if ~isprop(EXP, 'Nav')
            EXP.addprop('Nav');
        end
        EXP.Nav = combineTwoexpts(EXP.Nav, Nav);
    end
    if ~isempty(S.Spk_path{iexp,1})
        [Spk_ZeroIdx, Spk_relativeRate] = SynchSignals(SynchSignalRef, single(Spk_SynchSignal), Ref_SynchUpSampling, Spk_SynchUpSampling);
        Spk = LoadSpkData(S.Spk_path{iexp,1}, sampleTimes, Spk_ZeroIdx, Spk_relativeRate, P.LoadParams.Channels, 'good', {'icell','id'});
        if ~isprop(EXP, 'Spk')
            EXP.addprop('Spk');
        end
        EXP.Spk = combineTwoexpts(EXP.Spk, Spk);
    end
    if ~isempty(S.Lfp_path{iexp,1})
        [Lfp_ZeroIdx, Lfp_relativeRate] = SynchSignals(SynchSignalRef, Lfp_SynchSignal, Ref_SynchUpSampling, Lfp_SynchUpSampling);
        Lfp = LoadLfpData(S.Lfp_path{iexp,1}, sampleTimes, Lfp_ZeroIdx, Lfp_relativeRate, P.LoadParams.Channels);
        if ~isprop(EXP, 'Lfp')
           EXP.addprop('Lfp');
        end
        EXP.Lfp = combineTwoexpts(EXP.Lfp, Lfp);
    end
    if ~isempty(S.Vis_path{iexp,2})
        [Vis_ZeroIdx, Vis_relativeRate] = SynchSignals(SynchSignalRef, Vis_SynchSignal, Ref_SynchUpSampling, Vis_SynchUpSampling);
        if ~isprop(EXP, 'Vis')
            EXP.addprop('Vis');
        end
        %Vis = getBonvision(Vis)
        %EXP.Vis = combineTwoexpts(EXP.Vis, Vis);
    end
    if ~isempty(S.Eye_path{iexp,2})
        [Eye_ZeroTime, Eye_relativeRate] = SynchSignals(SynchSignalRef, Eye_SynchSignal, Eye_SynchUpSampling);
        if ~isprop(EXP, 'Eye')
            EXP.addprop('Eye');
        end
        %Eye = getEyetracking(Eye)
        %EXP.Eye = combineTwoexpts(EXP.Eye, Eye);
    end
end
end